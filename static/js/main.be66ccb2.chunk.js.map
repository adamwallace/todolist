{"version":3,"sources":["TodoList.jsx","UserForm.jsx","App.js","serviceWorker.js","index.js"],"names":["Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","name","target","value","handleSubmit","onSubmit","state","preventDefault","toggleEdit","bind","assertThisInitialized","_this2","header","isStrikeThrough","react_default","a","createElement","editButton","shouldEdit","type","form","disabled","onClick","id","defaultValue","onChange","markAsComplete","deleteTodo","Component","TodoList","todos","map","todo","i","TodoList_Todo","assign","key","strikeThrough","setTodo","UserForm","placeholder","React","App","addNewTodo","todoInfo","prevState","concat","newName","oldName","filteredItems","filter","className","src_UserForm","src_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAEMA,cAKF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAOVQ,aAAe,SAACC,GACZR,EAAKS,SAAS,CAACC,KAAMF,EAAMG,OAAOC,SATnBZ,EAYnBa,aAAe,SAACL,GACZR,EAAKD,MAAMe,SAASd,EAAKe,MAAML,KAAMV,EAAKD,MAAMW,MAChDF,EAAMQ,iBACNhB,EAAKD,MAAMkB,WAAWjB,EAAKe,MAAML,OAbjCV,EAAKe,MAAQ,CAACL,KAAMV,EAAKD,MAAMW,MAE/BV,EAAKO,aAAeP,EAAKO,aAAaW,KAAlBjB,OAAAkB,EAAA,EAAAlB,QAAAkB,EAAA,EAAAlB,CAAAD,KACpBA,EAAKa,aAAeb,EAAKa,aAAaK,KAAlBjB,OAAAkB,EAAA,EAAAlB,QAAAkB,EAAA,EAAAlB,CAAAD,KALLA,wEAkBV,IAAAoB,EAAAjB,KACDkB,EAASlB,KAAKJ,MAAMuB,gBAClBC,EAAAC,EAAAC,cAAA,cAAStB,KAAKJ,MAAMW,MACpBa,EAAAC,EAAAC,cAAA,WAAMtB,KAAKJ,MAAMW,MAEnBgB,EAAcvB,KAAKJ,MAAM4B,YAAcxB,KAAKY,MAAML,OAASP,KAAKJ,MAAMW,KACpEa,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASC,KAAK,aAA3B,QACAN,EAAAC,EAAAC,cAAA,UAAQK,SAAU3B,KAAKJ,MAAMuB,gBACrBS,QAAS,kBAAMX,EAAKrB,MAAMkB,WAAWG,EAAKrB,MAAMW,QADxD,QAaN,OAVIP,KAAKJ,MAAM4B,aACXN,EACIE,EAAAC,EAAAC,cAAA,QAAMO,GAAG,YAAYlB,SAAUX,KAAKU,cAChCU,EAAAC,EAAAC,cAAA,SACIG,KAAK,OACLK,aAAc9B,KAAKJ,MAAMW,KACzBwB,SAAU/B,KAAKI,iBAK3BgB,EAAAC,EAAAC,cAAA,WACKJ,EACDE,EAAAC,EAAAC,cAAA,UAAQK,SAAU3B,KAAKJ,MAAM4B,WACrBI,QAAS,kBAAMX,EAAKrB,MAAMoC,eAAef,EAAKrB,MAAMW,QAD5D,oBAECgB,EACDH,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMX,EAAKrB,MAAMqC,WAAWhB,EAAKrB,MAAMW,OAChDoB,SAAU3B,KAAKJ,MAAM4B,YAD7B,UAEAJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,mBApDGY,aAwEJC,EAdE,SAACvC,GACd,OACIwB,EAAAC,EAAAC,cAAA,WACK1B,EAAMwC,MAAMC,IAAI,SAACC,EAAMC,GAAP,OAAanB,EAAAC,EAAAC,cAACkB,EAAD1C,OAAA2C,OAAA,CAAMC,IAAKH,GAAOD,EAAlB,CACMK,cAAeL,EAAKnB,gBACpBK,WAAYc,EAAKd,WACjBS,WAAYrC,EAAMqC,WAClBnB,WAAYlB,EAAMkB,WAClBH,SAAUf,EAAMgD,QAChBZ,eAAgBpC,EAAMoC,sBCtCvDa,6MA5BXjC,MAAQ,CACJL,KAAM,MAGVG,aAAe,SAACL,GACZR,EAAKD,MAAMe,SAAS,CAACJ,KAAMV,EAAKe,MAAML,OACtCF,EAAMQ,iBACNhB,EAAKS,SAAS,CACVC,KAAM,8EAIL,IAAAU,EAAAjB,KACL,OACIoB,EAAAC,EAAAC,cAAA,QAAMX,SAAUX,KAAKU,cACjBU,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OACRhB,MAAOT,KAAKY,MAAML,KAClBwB,SAAU,SAAC1B,GAAD,OAAWY,EAAKX,SAAS,CAAEC,KAAMF,EAAMG,OAAOC,SACxDqC,YAAY,mBAChB1B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,mBAvBOyB,IAAMb,WCmFdc,oNA/EbpC,MAAQ,CACNwB,MAAO,CACL,CACE7B,KAAM,qBACNY,iBAAiB,EACjBK,YAAY,GAEd,CACEjB,KAAM,eACNY,iBAAiB,EACjBK,YAAY,OAKlByB,WAAa,SAACC,GACZrD,EAAKS,SAAS,SAAA6C,GAAS,MAAK,CAC1Bf,MAAOe,EAAUf,MAAMgB,OAAOF,SAIlClB,eAAiB,SAACkB,GAChBrD,EAAKS,SAAS,CACZ8B,MAAOvC,EAAKe,MAAMwB,MAAMC,IAAI,SAAAC,GAI1B,OAHIA,EAAK/B,OAAS2C,IAChBZ,EAAKnB,iBAAmBmB,EAAKnB,iBAExBmB,SAKbxB,WAAa,SAACoC,GACZrD,EAAKS,SAAS,CACZ8B,MAAOvC,EAAKe,MAAMwB,MAAMC,IAAI,SAAAC,GAI1B,OAHGA,EAAK/B,OAAS2C,IACfZ,EAAKd,YAAcc,EAAKd,YAEnBc,SAKbM,QAAU,SAACS,EAASC,GAClBzD,EAAKS,SAAS,CACZ8B,MAAOvC,EAAKe,MAAMwB,MAAMC,IAAI,SAAAC,GAI1B,OAHIA,EAAK/B,OAAS+C,IAChBhB,EAAK/B,KAAO8C,GAEPf,SAKbL,WAAa,SAACiB,GACZ,IAAMK,EAAgB1D,EAAKe,MAAMwB,MAAMoB,OAAO,SAAAlB,GAC5C,OAAOA,EAAK/B,OAAQ2C,IAEtBrD,EAAKS,SAAS,CACZ8B,MAAOmB,6EAKT,OACEnC,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,OACbrC,EAAAC,EAAAC,cAAA,yDACAF,EAAAC,EAAAC,cAACoC,EAAD,CAAU/C,SAAUX,KAAKiD,aACzB7B,EAAAC,EAAAC,cAACqC,EAAD,CAAUvB,MAAOpC,KAAKY,MAAMwB,MAClBJ,eAAgBhC,KAAKgC,eACrBlB,WAAYd,KAAKc,WACjBmB,WAAYjC,KAAKiC,WACjBW,QAAS5C,KAAK4C,kBAzEdV,cCOE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.be66ccb2.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass Todo extends Component {\r\n// const Todo = (props) => {\r\n    // state = {\r\n    //     name: ''\r\n    // };\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {name: this.props.name};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({name: event.target.value});\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        this.props.onSubmit(this.state.name, this.props.name);\r\n        event.preventDefault();\r\n        this.props.toggleEdit(this.state.name)\r\n    }\r\n\r\n    render() {\r\n        var header = this.props.isStrikeThrough \r\n            ? <strike>{this.props.name}</strike> \r\n            : <div>{this.props.name}</div>;\r\n        \r\n        var editButton = (this.props.shouldEdit&& (this.state.name !== this.props.name))\r\n            ? <button type=\"submit\" form=\"nameField\" >Save</button> \r\n            : <button disabled={this.props.isStrikeThrough}\r\n                      onClick={() => this.props.toggleEdit(this.props.name)}>Edit</button>;\r\n\r\n        if (this.props.shouldEdit) {\r\n            header =\r\n                <form id=\"nameField\" onSubmit={this.handleSubmit}>\r\n                    <input \r\n                        type=\"text\"\r\n                        defaultValue={this.props.name}\r\n                        onChange={this.handleChange} />\r\n                </form>;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {header}\r\n                <button disabled={this.props.shouldEdit} \r\n                        onClick={() => this.props.markAsComplete(this.props.name)}>Mark as complete</button>\r\n                {editButton}\r\n                <button onClick={() => this.props.deleteTodo(this.props.name)}\r\n                        disabled={this.props.shouldEdit}>Delete</button>\r\n                <br/>\r\n                <br/>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst TodoList = (props) => {\r\n    return (\r\n        <div>\r\n            {props.todos.map((todo, i) => <Todo key={i} {...todo} \r\n                                                strikeThrough={todo.isStrikeThrough}\r\n                                                shouldEdit={todo.shouldEdit}\r\n                                                deleteTodo={props.deleteTodo}\r\n                                                toggleEdit={props.toggleEdit}\r\n                                                onSubmit={props.setTodo}\r\n                                                markAsComplete={props.markAsComplete}/>)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList","import React from 'react'\r\n\r\nclass UserForm extends React.Component {\r\n    state = {\r\n        name: ''\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        this.props.onSubmit({name: this.state.name});\r\n        event.preventDefault();\r\n        this.setState({\r\n            name: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input type=\"text\"\r\n                    value={this.state.name}\r\n                    onChange={(event) => this.setState({ name: event.target.value })}\r\n                    placeholder=\"Enter New Todo\" />\r\n                <br />\r\n                <button>Add Todo</button>\r\n                <br />\r\n                <br />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserForm","import React, { Component } from 'react';\nimport TodoList from './TodoList';\nimport UserForm from './UserForm';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        name: 'Get Money Get Paid',\n        isStrikeThrough: false,\n        shouldEdit: false\n      },\n      {\n        name: 'Do it to \\'em',\n        isStrikeThrough: false,\n        shouldEdit: false\n      }\n    ]\n  };\n\n  addNewTodo = (todoInfo) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.concat(todoInfo)\n    }));\n  };\n\n  markAsComplete = (todoInfo) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.name === todoInfo) {\n          todo.isStrikeThrough = !todo.isStrikeThrough;\n        }\n        return todo;\n      })\n    })\n  }\n\n  toggleEdit = (todoInfo) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if(todo.name === todoInfo) {\n          todo.shouldEdit = !todo.shouldEdit;\n        }\n        return todo;\n      })\n    });\n  }\n\n  setTodo = (newName, oldName) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.name === oldName) {\n          todo.name = newName; \n        }\n        return todo;\n      })\n    });\n  }\n\n  deleteTodo = (todoInfo) => {\n    const filteredItems = this.state.todos.filter(todo => {\n      return todo.name!== todoInfo;\n    })\n    this.setState({\n      todos: filteredItems\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Mazz's Super Sunday Slam Todo List, ya bish</h2>\n        <UserForm onSubmit={this.addNewTodo}/>\n        <TodoList todos={this.state.todos} \n                  markAsComplete={this.markAsComplete}\n                  toggleEdit={this.toggleEdit}\n                  deleteTodo={this.deleteTodo}\n                  setTodo={this.setTodo}\n                  />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}